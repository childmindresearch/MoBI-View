name: Setup Python Virtual Environment
description: Sets up Python, installs uv, and creates the virtual environment with dependencies.

inputs:
  only-dev:
    description: Whether to install only dev dependencies
    default: 'false'
    required: false
  install-lsl:
    description: Whether to install LSL dependencies
    default: 'false'
    required: false
  resolution:
    description: Dependency resolution strategy
    default: 'highest'
    required: false
  python-version:
    description: Python version to use
    required: false
    default: ''
  

runs:
  using: composite
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        
    # Install system dependencies (from your old action file)
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux' && inputs.install-lsl == 'true'
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y \
          libgl1 libglu-dev mesa-utils cmake build-essential xvfb xauth x11-apps \
          libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0

    - name: Cache Homebrew packages
      if: runner.os == 'macOS'
      uses: actions/cache@v4
      id: cache-homebrew
      with:
        path: |
          ~/Library/Caches/Homebrew
          /opt/homebrew/Cellar/libxkbcommon
          /opt/homebrew/Cellar/xquartz
          /opt/homebrew/Cellar/lsl
        key: brew-${{ runner.os }}-${{ hashFiles('.github/actions/setup-venv/action.yaml') }}

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS' && inputs.install-lsl == 'true' && steps.cache-homebrew.outputs.cache-hit != 'true'
      shell: bash
      run: |
        brew install --formula libxkbcommon

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows' && inputs.install-lsl == 'true'
      uses: jwlawson/actions-setup-cmake@v1
      with:
        cmake-version: '3.25.0'
        
    # Install LSL if needed
    - name: Install LSL on Windows
      if: inputs.install-lsl == 'true' && runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone --depth=1 https://github.com/sccn/liblsl.git
        cd liblsl
        mkdir build
        cd build
        cmake ..
        cmake --build . --config Release
        cmake --install . --config Release

    - name: Install LSL on macOS
      if: inputs.install-lsl == 'true' && runner.os == 'macOS' && steps.cache-homebrew.outputs.cache-hit != 'true'
      shell: bash
      run: |
        brew install labstreaminglayer/tap/lsl
        echo "PYTHONPATH=${PYTHONPATH}:$(pwd)" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=/opt/homebrew/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Install LSL on Ubuntu
      if: inputs.install-lsl == 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        git clone --depth=1 https://github.com/sccn/liblsl.git
        cd liblsl
        mkdir build && cd build
        cmake ..
        make -j
        sudo make install
        sudo ldconfig

    - name: Install dependencies
      shell: bash
      run: |-
        if [[ "${{ inputs.only-dev }}" == "true" ]]; then
          uv sync --only-dev --resolution=${{ inputs.resolution }}
        else
          uv sync --resolution=${{ inputs.resolution }}
        fi